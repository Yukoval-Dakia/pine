{"version":3,"file":"static/js/169.c56ae51f.chunk.js","mappings":"uNAOA,MAAMA,EAAgBC,EAAAA,GAAOC,GAA8C;sBACrDC,GAASA,EAAMC;;;;;;;;aAQxBD,GAASA,EAAME,WAAa,EAAI;eAC9BF,GAASA,EAAME,WAAa,WAAa;;EAIlDC,EAASC,EAAAA,EAAS;;;EAMlBC,EAAiBP,EAAAA,GAAOC,GAAuB;;;0BAG3BC,GAASA,EAAMM;;;;;;eAM1BH;EAITI,EAAcT,EAAAA,GAAOC,GAAG;;EAKxBS,EAAOV,EAAAA,GAAOW,EAAsB;;WAE/BT,GAASA,EAAMU;;;;;;;;;;;;;;;;;wBAiBFV,GAASA,EAAMU;;EAKjCC,EAAUb,EAAAA,GAAOC,GAAuB;sBACxBC,GAASA,EAAMU;WAC1BV,GAASA,EAAMU;;;;;;;;;;EAapBE,EAAmBd,EAAAA,GAAOC,GAAG;;;;EAO7Bc,EAAmBT,EAAAA,EAAS;;;;;;;EAS5BU,EAAmBhB,EAAAA,GAAOC,GAAG;;;;;eAKpBc;;EAKTE,EAAmB,CACvB,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAkFF,EAxEoDC,IAAkD,IAAjD,UAAEC,EAAS,UAAEC,EAAS,UAAEC,GAAY,GAAOH,EAC9F,MAAM,SAAEI,IAAaC,EAAAA,EAAAA,KACfC,GAAIC,EAAAA,EAAAA,GAAeH,IAClBI,EAAeC,IAAoBC,EAAAA,EAAAA,UAASP,IAC5CQ,EAAUC,IAAeF,EAAAA,EAAAA,UAAST,EAAUY,OAAS,IAGtDC,EAAsBb,EAAUc,KAAOd,EAAUe,KAGjDC,GAAgBC,EAAAA,EAAAA,UAAQ,KAE5B,IAAIC,EAAO,EACX,IAAK,IAAIC,EAAI,EAAGA,EAAIN,EAAoBO,OAAQD,IAC9CD,EAAOL,EAAoBQ,WAAWF,KAAOD,GAAQ,GAAKA,GAG5D,MAAMI,EAAQC,KAAKC,IAAIN,EAAOpB,EAAiBsB,QAC/C,OAAOtB,EAAiBwB,EAAM,GAC7B,CAACT,IAgCJ,OA7BAY,EAAAA,EAAAA,YAAU,KACR,IAAKzB,EAAUY,OAASV,EAEtB,YADAM,GAAiB,GAInB,MAAMkB,EAAM,IAAIC,MAChBD,EAAIE,OAAS,KACXpB,GAAiB,EAAK,EAExBkB,EAAIG,QAAU,KAEZC,QAAQC,IAAI,wCAAW/B,EAAUgC,eACjCrB,EAAYX,EAAUgC,eAAiB,IAGvC,MAAMC,EAAc,IAAIN,MACxBM,EAAYL,OAAS,KACnBpB,GAAiB,EAAK,EAExByB,EAAYJ,QAAU,KAEpBrB,GAAiB,EAAK,EAExByB,EAAYC,IAAMlC,EAAUgC,eAAiB,EAAE,EAEjDN,EAAIQ,IAAMlC,EAAUY,KAAK,GACxB,CAACZ,EAAUY,MAAOZ,EAAUgC,cAAe9B,KAG5CiC,EAAAA,EAAAA,MAACvD,EAAa,CAACK,WAAYgB,EAAWjB,SAAUgC,EAAcoB,SAAA,EAC5DC,EAAAA,EAAAA,KAAC1C,EAAgB,CAAAyC,UACfD,EAAAA,EAAAA,MAACzC,EAAO,CAACD,OAAQO,EAAUsC,OAAS,UAAUF,SAAA,CAC3C/B,EAAEL,UAAUuC,cAAc,IAAEvC,EAAUwC,SAAW,gCAGrDjC,GACC8B,EAAAA,EAAAA,KAACjD,EAAc,CAACC,OAAQqB,KAExB2B,EAAAA,EAAAA,KAACxC,EAAgB,KAEnBwC,EAAAA,EAAAA,KAAC/C,EAAW,CAAA8C,UACVC,EAAAA,EAAAA,KAAC9C,EAAI,CAACE,OAAQO,EAAUsC,OAAS,UAAUF,SACxCpC,EAAUe,WAGD,C","sources":["components/ScientistCard.tsx"],"sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\nimport styled, { keyframes } from 'styled-components';\nimport { Scientist } from '../types/scientist';\nimport { useLanguage } from '../contexts/LanguageContext';\nimport { getTranslation } from '../translations';\n\n// 卡片容器样式\nconst CardContainer = styled.div<{ $isVisible: boolean; $bgColor: string }>`\n  background-color: ${props => props.$bgColor};\n  border-radius: 10px;\n  overflow: hidden;\n  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);\n  width: 80%;\n  max-width: 500px;\n  position: relative;\n  z-index: 1002;\n  opacity: ${props => props.$isVisible ? 1 : 0};\n  transform: ${props => props.$isVisible ? 'scale(1)' : 'scale(0.9)'};\n  transition: opacity 0.3s ease, transform 0.3s ease;\n`;\n\nconst fadeIn = keyframes`\n  0% { opacity: 0; }\n  100% { opacity: 1; }\n`;\n\n// 科学家照片\nconst ScientistImage = styled.div<{ $image: string }>`\n  width: 100%;\n  height: 350px;\n  background-image: url(${props => props.$image});\n  background-size: cover;\n  background-position: center;\n  margin: 0;\n  position: relative;\n  border-bottom: 5px solid gold;\n  animation: ${fadeIn} 0.5s ease-in-out;\n`;\n\n// 卡片内容\nconst CardContent = styled.div`\n  padding: 20px;\n`;\n\n// 姓名标题\nconst Name = styled.h2<{ $color: string }>`\n  margin: 0;\n  color: ${props => props.$color};\n  font-size: 38px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: relative;\n  width: 100%;\n  text-align: center;\n  \n  &:after {\n    content: '';\n    position: absolute;\n    bottom: -5px;\n    left: 50%;\n    transform: translateX(-50%);\n    width: 120px;\n    height: 3px;\n    background-color: ${props => props.$color};\n  }\n`;\n\n// 学科标签 - 修改为不遮挡图片\nconst Subject = styled.div<{ $color: string }>`\n  background-color: ${props => props.$color}22;\n  color: ${props => props.$color};\n  padding: 10px 25px;\n  border-radius: 20px;\n  display: block;\n  margin: 0 auto;\n  font-size: 24px;\n  font-weight: bold;\n  text-align: center;\n  width: fit-content;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\n`;\n\n// 科目容器\nconst SubjectContainer = styled.div`\n  padding: 20px 0 10px 0;\n  background-color: rgba(255, 255, 255, 0.9);\n  width: 100%;\n`;\n\n// 占位符加载动画\nconst ShimmerAnimation = keyframes`\n  0% {\n    background-position: -468px 0;\n  }\n  100% {\n    background-position: 468px 0;\n  }\n`;\n\nconst ImagePlaceholder = styled.div`\n  width: 100%;\n  height: 350px;\n  background: linear-gradient(to right, #f6f7f8 8%, #edeef1 18%, #f6f7f8 33%);\n  background-size: 800px 104px;\n  animation: ${ShimmerAnimation} 1.5s infinite linear forwards;\n  border-bottom: 5px solid #edeef1;\n`;\n\n// 随机背景颜色数组\nconst backgroundColors = [\n  '#f8f9fa', // 浅灰\n  '#e9f5f9', // 浅蓝\n  '#f9f5e9', // 浅黄\n  '#f5e9f9', // 浅紫\n  '#e9f9f5', // 浅绿\n  '#f9e9e9', // 浅红\n  '#e9e9f9', // 浅蓝紫\n  '#f5f9e9', // 浅黄绿\n];\n\n// 科学家卡片组件\ninterface ScientistCardProps {\n  scientist: Scientist;\n  isVisible: boolean;\n  preloaded?: boolean;\n}\n\nconst ScientistCard: React.FC<ScientistCardProps> = ({ scientist, isVisible, preloaded = false }) => {\n  const { language } = useLanguage();\n  const t = getTranslation(language);\n  const [isImageLoaded, setIsImageLoaded] = useState(preloaded);\n  const [imageSrc, setImageSrc] = useState(scientist.image || '');\n  \n  // 为依赖数组提取唯一标识符\n  const scientistIdentifier = scientist._id || scientist.name;\n  \n  // 生成随机背景颜色 - 基于科学家标识符生成确定性的颜色\n  const randomBgColor = useMemo(() => {\n    // 使用科学家标识符的字符串生成一个数字哈希\n    let hash = 0;\n    for (let i = 0; i < scientistIdentifier.length; i++) {\n      hash = scientistIdentifier.charCodeAt(i) + ((hash << 5) - hash);\n    }\n    // 使用哈希值确定背景颜色的索引\n    const index = Math.abs(hash % backgroundColors.length);\n    return backgroundColors[index];\n  }, [scientistIdentifier]); // 现在确实依赖于scientistIdentifier\n  \n  // 检查图片是否加载成功\n  useEffect(() => {\n    if (!scientist.image || preloaded) {\n      setIsImageLoaded(true);\n      return;\n    }\n    \n    const img = new Image();\n    img.onload = () => {\n      setIsImageLoaded(true);\n    };\n    img.onerror = () => {\n      // 当主图片加载失败时，尝试使用备用图片\n      console.log('使用备用图片:', scientist.fallbackImage);\n      setImageSrc(scientist.fallbackImage || '');\n      \n      // 检查备用图片是否能加载\n      const fallbackImg = new Image();\n      fallbackImg.onload = () => {\n        setIsImageLoaded(true);\n      };\n      fallbackImg.onerror = () => {\n        // 即使备用图片失败也设置为已加载，显示空图片区域总比无限加载好\n        setIsImageLoaded(true);\n      };\n      fallbackImg.src = scientist.fallbackImage || '';\n    };\n    img.src = scientist.image;\n  }, [scientist.image, scientist.fallbackImage, preloaded]);\n\n  return (\n    <CardContainer $isVisible={isVisible} $bgColor={randomBgColor}>\n      <SubjectContainer>\n        <Subject $color={scientist.color || '#3498db'}>\n          {t.scientist.subjectPrefix} {scientist.subject || '未知学科'}\n        </Subject>\n      </SubjectContainer>\n      {isImageLoaded ? (\n        <ScientistImage $image={imageSrc} />\n      ) : (\n        <ImagePlaceholder />\n      )}\n      <CardContent>\n        <Name $color={scientist.color || '#3498db'}>\n          {scientist.name}\n        </Name>\n      </CardContent>\n    </CardContainer>\n  );\n};\n\nexport default ScientistCard;"],"names":["CardContainer","styled","div","props","$bgColor","$isVisible","fadeIn","keyframes","ScientistImage","$image","CardContent","Name","h2","$color","Subject","SubjectContainer","ShimmerAnimation","ImagePlaceholder","backgroundColors","_ref","scientist","isVisible","preloaded","language","useLanguage","t","getTranslation","isImageLoaded","setIsImageLoaded","useState","imageSrc","setImageSrc","image","scientistIdentifier","_id","name","randomBgColor","useMemo","hash","i","length","charCodeAt","index","Math","abs","useEffect","img","Image","onload","onerror","console","log","fallbackImage","fallbackImg","src","_jsxs","children","_jsx","color","subjectPrefix","subject"],"sourceRoot":""}